#include <bits/stdc++.h>
using namespace std;

int partition(vector<int> &arr,int low,int high,int key){
    int temp,j,i,pivot;
    for(i=low;i<=high;i++)
        if(arr[i]==key){
            pivot=i;
            break;
        }
    i=low;
    temp=arr[pivot];
    arr[pivot]=arr[low];
    arr[low]=temp;
    for(j=low+1;j<=high;){
        if(arr[j]>=arr[low])
        j++;
        else {
            i++;
            temp=arr[i];
            arr[i]=arr[j];
            arr[j]=temp;
            j++;
        }
    }
    temp=arr[low];
    arr[low]=arr[i];
    arr[i]=temp;
    /*for (int k=low;k<=high;k++)
    cout<<arr[k]<<" ";
    cout<<endl<<"i= "<<i<<endl;*/
    return i;
}

int findmed(vector<int> arr,int low,int high){
    int n=high-low+1;
    sort(arr.begin()+low,arr.begin()+high);
    return arr[low+n/2];
}

int DAlgo(vector<int> &arr,int low,int high,int k){
    int i,n,medofmed;
    vector<int> median;
    if(low<=high){
        n=high-low+1;
        for(i=0;i<n/5;i++)
        median.push_back(findmed(arr,low+i*5,low+i*5+4));
        if(i*5<n){
        median.push_back(findmed(arr,low+i*5,low+i*5+n%5-1));
        i++;
        }
        medofmed=(i==1)?median[i-1]:DAlgo(median,0,i-1,i/2);
        int pivot=partition(arr,low,high,medofmed);
		if(pivot==k)    
        return arr[pivot];
        if (pivot<k)
        return DAlgo(arr,pivot+1,high,k);
        else if(pivot>k)   
        return DAlgo(arr,low,pivot-1,k);
		}
    return INT_MAX;
}

int main() {
	int n,i,x,k;
	vector<int> arr;
	cin>>n>>k;
	for(i=0;i<n;i++){
	    cin>>x;
	    arr.push_back(x);
	}
	/*for(i=1;i<=k;i++)
	cout<<i<<" : "<<DAlgo(arr,0,n-1,i-1)<<endl;*/
	cout<<"The 7th smallest digit i is: "<<DAlgo(arr,0,n-1,k-1)<<endl;
	sort(arr.begin(),arr.end());
	for (i=0;i<n;i++)
    cout<<arr[i]<<" ";
    return 0;
}